import React, { useState } from "react";
import {
  Sparkles,
  User,
  Calendar,
  Heart,
  Briefcase,
  Wand2,
  X,
  RefreshCw,
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Card, CardContent } from "@/components/ui/card";
import MessageSuggestions from "./MessageSuggestions";
import DeliveryOptions from "../messaging/DeliveryOptions";

interface MessageGeneratorProps {
  isOpen?: boolean;
  onClose?: () => void;
  contactName?: string;
  eventType?: string;
  eventDate?: Date;
  relationshipType?: string;
}

interface MessageSuggestion {
  id: string;
  text: string;
  tone: "casual" | "formal" | "friendly" | "professional";
}

const MessageGenerator = ({
  isOpen = true,
  onClose = () => {},
  contactName = "Sarah Johnson",
  eventType = "Birthday",
  eventDate = new Date(),
  relationshipType = "Friend",
}: MessageGeneratorProps) => {
  const [activeStep, setActiveStep] = useState<
    "context" | "suggestions" | "delivery"
  >("context");
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<MessageSuggestion | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [contextInputs, setContextInputs] = useState({
    relationship: relationshipType,
    tone: "friendly",
    length: "medium",
    includeEmoji: true,
    additionalContext: "",
  });

  // Mock suggestions that would normally be generated by AI
  const [suggestions, setSuggestions] = useState<MessageSuggestion[]>([
    {
      id: "1",
      text: "Happy birthday! Wishing you a fantastic day filled with joy and laughter. May this year bring you all the happiness you deserve! ðŸŽ‰ðŸŽ‚",
      tone: "friendly",
    },
    {
      id: "2",
      text: "Congratulations on your special day! It's been wonderful to have you as a friend. Here's to many more years of great memories together! ðŸ¥³",
      tone: "casual",
    },
    {
      id: "3",
      text: "Wishing you a very happy birthday. I hope your day is as wonderful as you are, and that the coming year brings you success and fulfillment.",
      tone: "formal",
    },
  ]);

  const handleGenerateSuggestions = () => {
    setIsGenerating(true);
    // Simulate API call delay
    setTimeout(() => {
      setIsGenerating(false);
      setActiveStep("suggestions");
    }, 1500);
  };

  const handleSelectSuggestion = (suggestion: MessageSuggestion) => {
    setSelectedSuggestion(suggestion);
    setActiveStep("delivery");
  };

  const handleEditSuggestion = (suggestion: MessageSuggestion) => {
    setSelectedSuggestion(suggestion);
    // In a real implementation, you would open an editor for the suggestion
  };

  const handleFeedback = (suggestion: MessageSuggestion, liked: boolean) => {
    // In a real implementation, you would send feedback to the AI system
    console.log(
      `User ${liked ? "liked" : "disliked"} suggestion: ${suggestion.id}`,
    );
  };

  const handleSendMessage = (channel: string, scheduledTime?: Date) => {
    // In a real implementation, you would send the message through the selected channel
    console.log(
      `Sending message via ${channel}${scheduledTime ? ` scheduled for ${scheduledTime.toISOString()}` : " immediately"}`,
    );
    onClose();
  };

  const handleInputChange = (key: string, value: any) => {
    setContextInputs((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const renderContextStep = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardContent className="p-4 space-y-4">
            <div className="flex items-center space-x-2">
              <User className="h-5 w-5 text-primary" />
              <h3 className="text-lg font-medium">Contact Details</h3>
            </div>
            <div className="space-y-3">
              <div>
                <Label htmlFor="contactName">Name</Label>
                <Input
                  id="contactName"
                  value={contactName}
                  readOnly
                  className="bg-muted/50"
                />
              </div>
              <div>
                <Label htmlFor="relationship">Relationship</Label>
                <Select
                  value={contextInputs.relationship}
                  onValueChange={(value) =>
                    handleInputChange("relationship", value)
                  }
                >
                  <SelectTrigger id="relationship">
                    <SelectValue placeholder="Select relationship" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Family">Family</SelectItem>
                    <SelectItem value="Friend">Friend</SelectItem>
                    <SelectItem value="Colleague">Colleague</SelectItem>
                    <SelectItem value="Acquaintance">Acquaintance</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 space-y-4">
            <div className="flex items-center space-x-2">
              <Calendar className="h-5 w-5 text-primary" />
              <h3 className="text-lg font-medium">Event Details</h3>
            </div>
            <div className="space-y-3">
              <div>
                <Label htmlFor="eventType">Event Type</Label>
                <Input
                  id="eventType"
                  value={eventType}
                  readOnly
                  className="bg-muted/50"
                />
              </div>
              <div>
                <Label htmlFor="eventDate">Date</Label>
                <Input
                  id="eventDate"
                  value={eventDate.toLocaleDateString()}
                  readOnly
                  className="bg-muted/50"
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardContent className="p-4 space-y-4">
          <div className="flex items-center space-x-2">
            <Wand2 className="h-5 w-5 text-primary" />
            <h3 className="text-lg font-medium">Message Preferences</h3>
          </div>

          <div className="space-y-4">
            <div className="space-y-2">
              <Label>Tone</Label>
              <RadioGroup
                value={contextInputs.tone}
                onValueChange={(value) => handleInputChange("tone", value)}
                className="flex flex-wrap gap-4"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="casual" id="casual" />
                  <Label htmlFor="casual" className="flex items-center">
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mr-2">
                      Casual
                    </span>
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="friendly" id="friendly" />
                  <Label htmlFor="friendly" className="flex items-center">
                    <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full mr-2">
                      Friendly
                    </span>
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="formal" id="formal" />
                  <Label htmlFor="formal" className="flex items-center">
                    <span className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full mr-2">
                      Formal
                    </span>
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="professional" id="professional" />
                  <Label htmlFor="professional" className="flex items-center">
                    <span className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full mr-2">
                      Professional
                    </span>
                  </Label>
                </div>
              </RadioGroup>
            </div>

            <div className="space-y-2">
              <Label>Length</Label>
              <RadioGroup
                value={contextInputs.length}
                onValueChange={(value) => handleInputChange("length", value)}
                className="flex space-x-4"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="short" id="short" />
                  <Label htmlFor="short">Short</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="medium" id="medium" />
                  <Label htmlFor="medium">Medium</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="long" id="long" />
                  <Label htmlFor="long">Long</Label>
                </div>
              </RadioGroup>
            </div>

            <div className="flex items-center space-x-2">
              <Label
                htmlFor="includeEmoji"
                className="flex items-center space-x-2 cursor-pointer"
              >
                <input
                  type="checkbox"
                  id="includeEmoji"
                  checked={contextInputs.includeEmoji}
                  onChange={(e) =>
                    handleInputChange("includeEmoji", e.target.checked)
                  }
                  className="rounded border-gray-300 text-primary focus:ring-primary"
                />
                <span>Include emojis</span>
              </Label>
            </div>

            <div className="space-y-2">
              <Label htmlFor="additionalContext">
                Additional Context (optional)
              </Label>
              <Textarea
                id="additionalContext"
                placeholder="Add any specific details or history you'd like to include in the message..."
                value={contextInputs.additionalContext}
                onChange={(e) =>
                  handleInputChange("additionalContext", e.target.value)
                }
                className="min-h-[100px]"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end space-x-2">
        <Button variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button onClick={handleGenerateSuggestions} disabled={isGenerating}>
          {isGenerating ? (
            <>
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Sparkles className="mr-2 h-4 w-4" />
              Generate Suggestions
            </>
          )}
        </Button>
      </div>
    </div>
  );

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Sparkles className="mr-2 h-5 w-5 text-primary" />
            AI Message Generator
          </DialogTitle>
        </DialogHeader>

        <Tabs value={activeStep} className="mt-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger
              value="context"
              onClick={() => setActiveStep("context")}
              disabled={isGenerating}
            >
              1. Context
            </TabsTrigger>
            <TabsTrigger
              value="suggestions"
              onClick={() => setActiveStep("suggestions")}
              disabled={activeStep === "context" || isGenerating}
            >
              2. Suggestions
            </TabsTrigger>
            <TabsTrigger
              value="delivery"
              onClick={() => setActiveStep("delivery")}
              disabled={!selectedSuggestion || isGenerating}
            >
              3. Delivery
            </TabsTrigger>
          </TabsList>

          <TabsContent value="context" className="pt-4">
            {renderContextStep()}
          </TabsContent>

          <TabsContent value="suggestions" className="pt-4">
            <MessageSuggestions
              suggestions={suggestions}
              onSelect={handleSelectSuggestion}
              onEdit={handleEditSuggestion}
              onFeedback={handleFeedback}
            />
            <div className="flex justify-between mt-6">
              <Button
                variant="outline"
                onClick={() => setActiveStep("context")}
              >
                Back to Context
              </Button>
              <Button
                onClick={handleGenerateSuggestions}
                disabled={isGenerating}
                variant="outline"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Regenerating...
                  </>
                ) : (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4" />
                    Regenerate
                  </>
                )}
              </Button>
            </div>
          </TabsContent>

          <TabsContent value="delivery" className="pt-4">
            {selectedSuggestion && (
              <DeliveryOptions
                message={selectedSuggestion.text}
                onSend={handleSendMessage}
                onCancel={() => setActiveStep("suggestions")}
              />
            )}
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default MessageGenerator;
